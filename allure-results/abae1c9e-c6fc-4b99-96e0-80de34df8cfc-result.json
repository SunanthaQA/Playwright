{"name": "test_add_invoice", "status": "failed", "statusDetails": {"message": "Failed: Failed to add invoice: Locator.click: Timeout 30000ms exceeded.\nCall log:\nwaiting for locator(\"//span[contains(text(), 'Indigo Client')]\")", "trace": "setup_and_teardown = <Page url='https://www.tig-test.com/my-frs/frs-invoices'>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.story('Add Invoice')\n    def test_add_invoice(setup_and_teardown) -> None:\n        page = setup_and_teardown\n        invoice_page = UploadInvoicePage(page)\n        credentials = {\n            'username': ExcelUtils.get_cell_data(\"ExcelFiles/Testdata.xlsx\", \"Login\", 2, 1),\n            'password': ExcelUtils.get_cell_data(\"ExcelFiles/Testdata.xlsx\", \"Login\", 2, 2)\n        }\n        invoice_data = {\n            'invoice_number': ExcelUtils.get_cell_data(\"ExcelFiles/Testdata.xlsx\", \"Invoice\", 2, 1),\n            'invoice_amount': ExcelUtils.get_cell_data(\"ExcelFiles/Testdata.xlsx\", \"Invoice\", 2, 2),\n            'attachment': ExcelUtils.get_cell_data(\"ExcelFiles/Testdata.xlsx\", \"Invoice\", 2, 3)\n        }\n    \n        with allure.step('Login and upload invoice'):\n            allure.attach(f\"Username: {credentials['username']}\", name=\"Input Username\",\n                          attachment_type=allure.attachment_type.TEXT)\n            allure.attach(f\"Password: {credentials['password']}\", name=\"Input Password\",\n                          attachment_type=allure.attachment_type.TEXT)\n            allure.attach(f\"Invoice Number: {invoice_data['invoice_number']}\", name=\"Invoice Number\",\n                          attachment_type=allure.attachment_type.TEXT)\n            allure.attach(f\"Invoice Amount: {invoice_data['invoice_amount']}\", name=\"Invoice Amount\",\n                          attachment_type=allure.attachment_type.TEXT)\n            allure.attach(f\"Attachment: {invoice_data['attachment']}\", name=\"Attachment\",\n                          attachment_type=allure.attachment_type.TEXT)\n        try:\n            invoice_page.login(credentials['username'], credentials['password'])\n>           invoice_page.upload_invoice(invoice_data['invoice_number'], invoice_data['invoice_amount'],\n                                        invoice_data['attachment'])\n\ntests/test_Upload_invoice.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/UploadInvoicePage.py:70: in upload_invoice\n    self.get_element('client_option').click()\n../../miniconda3/lib/python3.9/site-packages/playwright/sync_api/_generated.py:14929: in click\n    self._sync(\n../../miniconda3/lib/python3.9/site-packages/playwright/_impl/_locator.py:156: in click\n    return await self._frame.click(self._selector, strict=True, **params)\n../../miniconda3/lib/python3.9/site-packages/playwright/_impl/_frame.py:488: in click\n    await self._channel.send(\"click\", locals_to_params(locals()))\n../../miniconda3/lib/python3.9/site-packages/playwright/_impl/_connection.py:59: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x7f2b4e8e3340>, cb = <function Channel.send.<locals>.<lambda> at 0x7f2b4e9cddc0>, is_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.\nE           Call log:\nE           waiting for locator(\"//span[contains(text(), 'Indigo Client')]\")\n\n../../miniconda3/lib/python3.9/site-packages/playwright/_impl/_connection.py:514: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nsetup_and_teardown = <Page url='https://www.tig-test.com/my-frs/frs-invoices'>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.story('Add Invoice')\n    def test_add_invoice(setup_and_teardown) -> None:\n        page = setup_and_teardown\n        invoice_page = UploadInvoicePage(page)\n        credentials = {\n            'username': ExcelUtils.get_cell_data(\"ExcelFiles/Testdata.xlsx\", \"Login\", 2, 1),\n            'password': ExcelUtils.get_cell_data(\"ExcelFiles/Testdata.xlsx\", \"Login\", 2, 2)\n        }\n        invoice_data = {\n            'invoice_number': ExcelUtils.get_cell_data(\"ExcelFiles/Testdata.xlsx\", \"Invoice\", 2, 1),\n            'invoice_amount': ExcelUtils.get_cell_data(\"ExcelFiles/Testdata.xlsx\", \"Invoice\", 2, 2),\n            'attachment': ExcelUtils.get_cell_data(\"ExcelFiles/Testdata.xlsx\", \"Invoice\", 2, 3)\n        }\n    \n        with allure.step('Login and upload invoice'):\n            allure.attach(f\"Username: {credentials['username']}\", name=\"Input Username\",\n                          attachment_type=allure.attachment_type.TEXT)\n            allure.attach(f\"Password: {credentials['password']}\", name=\"Input Password\",\n                          attachment_type=allure.attachment_type.TEXT)\n            allure.attach(f\"Invoice Number: {invoice_data['invoice_number']}\", name=\"Invoice Number\",\n                          attachment_type=allure.attachment_type.TEXT)\n            allure.attach(f\"Invoice Amount: {invoice_data['invoice_amount']}\", name=\"Invoice Amount\",\n                          attachment_type=allure.attachment_type.TEXT)\n            allure.attach(f\"Attachment: {invoice_data['attachment']}\", name=\"Attachment\",\n                          attachment_type=allure.attachment_type.TEXT)\n        try:\n            invoice_page.login(credentials['username'], credentials['password'])\n            invoice_page.upload_invoice(invoice_data['invoice_number'], invoice_data['invoice_amount'],\n                                        invoice_data['attachment'])\n            invoice_page.verify_confirmation_message(ValidationTexts.SUCCESSFUL_INVOICE_UPLOAD)\n            attach_screenshot(page, \"Invoice Upload Success\")\n        except (TimeoutError, Error, AssertionError) as e:\n            attach_screenshot(page, \"Invoice Upload Failure\")\n            print(f\"Test 'add_invoice' failed: {e}\")\n>           pytest.fail(f\"Failed to add invoice: {str(e)}\")\nE           Failed: Failed to add invoice: Locator.click: Timeout 30000ms exceeded.\nE           Call log:\nE           waiting for locator(\"//span[contains(text(), 'Indigo Client')]\")\n\ntests/test_Upload_invoice.py:49: Failed"}, "steps": [{"name": "Login and upload invoice", "status": "passed", "attachments": [{"name": "Input Username", "source": "535cdb76-f0ae-43cd-a463-6fb9c954b47e-attachment.txt", "type": "text/plain"}, {"name": "Input Password", "source": "f6ba4121-962a-4e45-9e50-9fc4f766c229-attachment.txt", "type": "text/plain"}, {"name": "Invoice Number", "source": "8088e044-8d80-42d8-a40f-0b1d46cb94c8-attachment.txt", "type": "text/plain"}, {"name": "Invoice Amount", "source": "e712f0f9-8586-45fd-aed8-bab859f769bf-attachment.txt", "type": "text/plain"}, {"name": "Attachment", "source": "315dab0b-0076-4581-85f3-79e5273febef-attachment.txt", "type": "text/plain"}], "start": 1720514778969, "stop": 1720514778970}], "attachments": [{"name": "Invoice Upload Failure", "source": "3dcd3d49-b854-4414-882a-e9f46b57d3a2-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "3d888036-c913-4643-a345-a7aa73ac2b25-attachment.txt", "type": "text/plain"}], "start": 1720514778858, "stop": 1720514817637, "uuid": "e4f1647d-6d2a-4728-b469-351d27123bdf", "historyId": "1c19e96ac1fa7f5df8070d5766cac19e", "testCaseId": "1c19e96ac1fa7f5df8070d5766cac19e", "fullName": "tests.test_Upload_invoice#test_add_invoice", "labels": [{"name": "story", "value": "Add Invoice"}, {"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_Upload_invoice"}, {"name": "host", "value": "laptop-obs-156"}, {"name": "thread", "value": "57813-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_Upload_invoice"}]}